#!/usr/bin/env bash

## \brief Shell script debugger
## \env PS4
## Debugger prompt. This is the prefix that bash prepends to
## the current instruction when using -x option.

## \desc Run a script in path with the -x bash option (and more).
## You should set the PS4 variable for better output.

## \usage debug [-tvn] <SCRIPT> [ARGS]

if (( $# == 0 )); then
  doc -u "$0"
fi

bdbg() {
  local _bdbg_continue
  local _bdbg_read
  local _bdbg_bp
  local _bdbg_current_cmd
  declare -a _bdbg_breakpoints

  if [ -f /tmp/bdbg_initial ]; then
    rm /tmp/bdbg_initial
    return 0
  fi

  if [ -f /tmp/bdbg_bp ]; then
    mapfile -t _bdbg_breakpoints < /tmp/bdbg_bp
  fi

  if [ -f /tmp/bdbg_continue ]; then
    _bdbg_continue=1
    for _bdbg_bp in "${_bdbg_breakpoints[@]}"; do
      if (( BASH_LINENO  == _bdbg_bp )); then
        rm /tmp/bdbg_continue
        _bdbg_continue=0
        break
      fi
    done
    (( _bdbg_continue == 1 )) && return
  fi

  while true; do
    read -r -p "> " _bdbg_current_cmd arg

    case ${_bdbg_current_cmd} in
      ""|n|next) break ;;
      c|continue)
        touch /tmp/bdbg_continue
        break
      ;;
      p|print)
        declare -n _bdbg_var=${arg}
        echo "${_bdbg_var}"
      ;;
      declare) declare ;;
      B|unbreak)
        for b in ${arg}; do
          sed -i "/^$b\$/d" /tmp/bdbg_bp
        done
      ;;
      b|breakpoint)
        if [ -z "${arg}" ]; then
          cat /tmp/bdbg_bp
        else
          printf "%s\n" ${arg} >> /tmp/bdbg_bp
        fi
      ;;
    esac
  done
}

export -f bdbg

declare PATTERN
declare FLAGS=-x

while [ $# -ne 0 ]; do
  case "$1" in
    ## \option -t, --test
    ## Read the script and warn for encountered syntax errors.
    ## Do not actually run the script.
    -t|--test) FLAGS=-n ;;
    ## \option -v, --verbose
    ## Run the script with verbose option.
    -v|--verbose) FLAGS=-xv ;;
    ## \option -n, --dry-run
    ## Options test and verbose combined. Validate the syntax
    ## and print the script to stdout.
    -n|--dry-run) FLAGS=-xvn ;;
    ## \option -f, --filter PATTERN
    ## Filter out PATTERN from debug output.
    -f|--filter) PATTERN="$2"; shift ;;
    ## \option -h, --help
    ## Print this help and exit.
    -h|--help) doc "$0"; exit 0 ;;

    *) SCRIPT="$1"; shift; break ;;
  esac
  shift
done

export PS4=${PS4}'$(bdbg >&2)'
touch /tmp/bdbg_initial

if [ -n "${PATTERN}" ]; then
  bash "${FLAGS}" "${SCRIPT}" "$@" 3>&1 1>&2 2>&3 3>&- | grep -v "${PATTERN}"
  printf "\033[;0;39m"
else
  bash "${FLAGS}" "${SCRIPT}" "$@"
fi

rm /tmp/bdbg_continue 2>/dev/null
